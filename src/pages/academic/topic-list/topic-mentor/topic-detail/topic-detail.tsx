import { useEffect } from "react";
import { useNavigate, useParams } from "react-router";
import { useDispatch, useSelector } from "react-redux";
import { fetchTopicDetail, deleteTopic, resetTopicDetail } from "@/lib/api/redux/topicSlice";
import { RootState, AppDispatch } from "@/lib/api/redux/store";
import { Card, CardContent } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { DataTableGroupTopic } from "./data-table-group-topic";
import { fetchUserById, resetMainMentor } from "@/lib/api/redux/authSlice";
import { resetGroupDetail } from "@/lib/api/redux/groupDetailSlice";
import { fetchSubUserById, resetSubMentor } from "@/lib/api/redux/authSubSlice"

export default function TopicDetail() {
  const { topicId, semesterId } = useParams();
  const dispatch = useDispatch<AppDispatch>();
  const navigate = useNavigate();
  const { topicDetails, loading, error } = useSelector(
    (state: RootState) => state.topics
  );
  const { author: auth } = useSelector((state: RootState) => state.auth);
  const { author: mainMentor } = useSelector((state: RootState) => state.auth);
  const { author: subMentor } = useSelector((state: RootState) => state.authSub);

  useEffect(() => {
    // ‚úÖ Reset mainMentor v√† subMentor tr∆∞·ªõc khi fetch API
    dispatch(resetGroupDetail()); 
    dispatch(resetMainMentor()); 
    dispatch(resetSubMentor());
    dispatch(resetTopicDetail());
  
    // ‚úÖ ƒê·ª£i reset xong r·ªìi m·ªõi g·ªçi API m·ªõi
    setTimeout(() => {
      if (topicId && semesterId) {
        dispatch(fetchTopicDetail({ topicId, semesterId }));
  
        if (topicDetails?.mainSupervisor) {
          dispatch(fetchUserById({ userId: topicDetails.mainSupervisor, semesterId }));
        }
  
        if (topicDetails?.subSupervisor) {
          dispatch(fetchSubUserById({ userId: topicDetails.subSupervisor, semesterId }));
        }
      }
    }, 50); // Ch·ªù 50ms ƒë·ªÉ ƒë·∫£m b·∫£o Redux ƒë√£ reset xong tr∆∞·ªõc khi fetch d·ªØ li·ªáu m·ªõi
  
  }, [dispatch, topicId, semesterId]);

  // useEffect(() => {
  //   if (topicDetails?.createdBy && topicDetails?.semesterId) {
  //     dispatch(fetchUserById({ userId: topicDetails.createdBy, semesterId: topicDetails.semesterId }));
  //   }
  // }, [dispatch, topicDetails?.createdBy, topicDetails?.semesterId]);

  useEffect(() => {
    if (topicDetails?.mainSupervisor && topicDetails?.semesterId) {
      dispatch(fetchUserById({ userId: topicDetails.mainSupervisor, semesterId: topicDetails.semesterId }));
    }
  }, [dispatch, topicDetails?.mainSupervisor, topicDetails?.semesterId]);

  useEffect(() => {
    if (topicDetails?.subSupervisor && topicDetails?.semesterId) {
      dispatch(fetchSubUserById({ userId: topicDetails.subSupervisor, semesterId: topicDetails.semesterId }));
    }
  }, [dispatch, topicDetails?.subSupervisor, topicDetails?.semesterId]);

  if (loading)
    return <p className="text-center text-gray-500">ƒêang t·∫£i d·ªØ li·ªáu...</p>;

  if (error && !topicDetails) {
    useEffect(() => {
      if (error) toast.error(error);
    }, [error]);
    return (
      <p className="text-center text-red-500">L·ªói khi t·∫£i ƒë·ªÅ t√†i: {error}</p>
    );
  }

  if (!topicDetails)
    return (
      <p className="text-center text-gray-500">
        Kh√¥ng t√¨m th·∫•y ƒë·ªÅ t√†i ho·∫∑c ƒëang t·∫£i...
      </p>
    );

  const handleDeleteTopic = async () => {
    if (!topicId || !semesterId) {
      toast.error("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ƒë·ªÅ t√†i c·∫ßn x√≥a!");
      return;
    }

    if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë·ªÅ t√†i n√†y?")) return;

    try {
      toast.success("X√≥a ƒë·ªÅ t√†i th√†nh c√¥ng")
      await dispatch(deleteTopic({ topicId, semesterId })).unwrap();
      navigate("/academic/topic"); // ‚úÖ ƒêi·ªÅu h∆∞·ªõng sau khi x√≥a th√†nh c√¥ng
    } catch (error) {
      // toast.error("L·ªói khi x√≥a ƒë·ªÅ t√†i!");
      toast.error(`${error}`)
    }
  };
  const handleOpenFile = (fileUrl: string) => {
    // M·ªü URL trong tab m·ªõi
    window.open(fileUrl, "_blank", "noopener,noreferrer");
  };
  const getGroupId = () => {
    console.log("Topic Details:", topicDetails); // Debug d·ªØ li·ªáu topicDetails
    if (topicDetails.status === "PENDING") {
      return topicDetails.group?.id;
    } else if (["APPROVED", "IMPROVED"].includes(topicDetails.status)) {
      return topicDetails.topicAssignments?.[0]?.groupId; // L·∫•y groupId t·ª´ ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c·ªßa m·∫£ng topicAssignments
    }
    return undefined;
  };
  return (
    <div>
      <div className="mt-6 bg-white">
        <Card className="p-6">
          <div className="flex items-center mt-4 gap-3">
            <Avatar className="w-10 h-10">
              <AvatarImage
                src="https://github.com/shadcn.png"
                alt="Topic Avatar"
              />
              <AvatarFallback>T</AvatarFallback>
            </Avatar>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">
                ({topicDetails.nameEn || "Ch∆∞a c√≥ t√™n ti·∫øng Anh"})
              </h3>
              <p className="text-sm text-gray-500 italic">
  Created at:{" "}
  {topicDetails.createdAt
    ? new Date(topicDetails.createdAt).toLocaleDateString()
    : "Kh√¥ng x√°c ƒë·ªãnh"}{" "}
  <span className="font-bold">by {topicDetails.creator?.fullName || "kh√¥ng c√≥ t√°c gi·∫£"}</span>
</p>

            </div>
          </div>

          <CardContent className="p-4 space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <p className="text-sm text-gray-500 mb-1">T√™n vi·∫øt t·∫Øt</p>
                <p className="font-semibold italic">
                  {topicDetails.name || "Kh√¥ng c√≥ t√™n vi·∫øt t·∫Øt"}
                </p>
              </div>
              <div>
                <p className="text-sm text-gray-500 mb-1">T√™n ti·∫øng vi·ªát</p>
                <p className="font-semibold italic">
                  {topicDetails.nameVi || "Ch∆∞a c√≥ ti√™u ƒë·ªÅ ti·∫øng Vi·ªát"}
                </p>
              </div>
              <div>
                <p className="text-sm text-gray-500 mb-1">Ng√†nh</p>
                <p className="font-semibold italic">
                  {topicDetails.majors?.length > 0
                    ? topicDetails.majors.map(major => major.name).join(", ")
                    : "Ch∆∞a c√≥ chuy√™n ng√†nh"}
                </p>
              </div>
              <div>
                <p className="text-sm text-gray-500 mb-1">Tr·∫°ng th√°i</p>
                <Badge>
                  {topicDetails.status || "Ch∆∞a c·∫≠p nh·∫≠t tr·∫°ng th√°i"}
                </Badge>
              </div>
              
              <div>
                <p className="text-sm text-gray-500 mb-1">Mentor 1</p>
                <p className="font-semibold italic">
                  {mainMentor?.email ? (
                    <span className="text-blue-600">{mainMentor.email}</span>
                  ) : (
                    <span className="text-red-500">Ch∆∞a c√≥ mentor 1</span>
                  )}
                </p>
              </div>
              {/* üîπ Th√™m ph·∫ßn hi·ªÉn th·ªã Mentor ph·ª• */}
              <div>
                <p className="text-sm text-gray-500 mb-1">Mentor 2</p>
                <p className="font-semibold italic">
                  {subMentor?.email ? (
                    <span className="text-blue-600">{subMentor.email}</span>
                  ) : (
                    <span className="text-red-500">Ch∆∞a c√≥ mentor 2</span>
                  )}
                </p>
              </div>
              <div>
                <p className="text-sm text-gray-500 mb-1">T√†i li·ªáu</p>
                {topicDetails.documents && topicDetails.documents.length > 0 ? (
                  topicDetails.documents.map((doc, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      className="mr-2 mb-2"
                      onClick={() => handleOpenFile(doc.fileUrl)}
                    >
                      Xem {doc.fileName || "T√†i li·ªáu"}
                    </Button>
                  ))
                ) : (
                  <p className="text-sm text-gray-500">Ch∆∞a c·∫≠p nh·∫≠t tr·∫°ng th√°i</p>
                )}
              </div>
              <div>
                <p className="text-sm text-gray-500 mb-1">ƒê√°nh gi√° ƒë·ªÅ t√†i</p>
                <p className="font-semibold italic">
                  {topicDetails?.reviewReason || "ƒê·ªÅ t√†i ch∆∞a ƒë∆∞·ª£c ƒë√°nh gi√°"}
                </p>
              </div>
            </div>

             <div>
              <p className="text-sm text-gray-500 mb-1">Description</p>
              <p className="italic text-gray-800">
                {topicDetails.description || "Ch∆∞a c√≥ m√¥ t·∫£"}
              </p>
            </div> 
          </CardContent>


          <div>
            <DataTableGroupTopic groupId={getGroupId()} />
          </div>

          <div className="flex justify-end gap-4 mt-6">
            <Button variant="destructive" onClick={handleDeleteTopic}>
              X√≥a ƒë·ªÅ t√†i
            </Button>
          </div>
        </Card>
      </div>
    </div>
  );
}
